name: 部署到服务器

on:
    push:
        branches: ['main']

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 15 # 设置整个job的超时时间

        steps:
            - name: 检出仓库代码
              uses: actions/checkout@v4

            - name: 设置 SSH 环境
              run: |
                  mkdir -p ~/.ssh
                  chmod 700 ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/github_actions_key
                  chmod 600 ~/.ssh/github_actions_key
                  ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

            - name: 安装 Rsync 工具
              run: sudo apt-get update && sudo apt-get install -y rsync

            - name: 停止 PM2 服务
              run: |
                  ssh -i ~/.ssh/github_actions_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} <<'EOF'
                  cd /www/wwwroot/egg-blog

                  # 检查进程是否存在并安全停止
                  if pm2 list | grep -q "app"; then
                    echo "发现 PM2 进程，正在停止..."
                    pm2 stop app || echo "停止进程失败或进程已停止"
                    pm2 delete app || echo "删除进程失败或进程不存在" 
                  else
                    echo "未发现 PM2 进程 'app'"
                  fi

                  # 强制清理可能的残留进程
                  pkill -f "npm start" || echo "无残留npm进程"
                  pkill -f "egg-scripts" || echo "无残留egg进程"

                  # 等待进程完全退出
                  sleep 2

                  # 验证进程已停止（使用更安全的检查）
                  if pgrep -f "npm start\|egg-scripts" >/dev/null 2>&1; then
                    echo "警告: 仍有相关进程运行，强制终止..."
                    pgrep -f "npm start\|egg-scripts" | xargs kill -9 || echo "强制终止完成"
                  else
                    echo "所有相关进程已清理完毕"
                  fi
                  EOF

            - name: 清理服务器旧文件（保留node_modules）
              run: |
                  ssh -i ~/.ssh/github_actions_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} <<'EOF'
                  cd /www/wwwroot/egg-blog

                  # 使用管理员权限清理文件，保留 node_modules 和隐藏文件
                  echo "正在清理旧文件..."

                  # 先尝试普通权限清理
                  find . -maxdepth 1 \
                    ! -name 'node_modules' \
                    ! -name '.' \
                    ! -name '..' \
                    ! -name '.*' \
                    -exec rm -rf {} + 2>/dev/null || {
                    
                    echo "普通权限清理失败，使用管理员权限..."
                    # 如果普通权限失败，使用 sudo
                    sudo find . -maxdepth 1 \
                      ! -name 'node_modules' \
                      ! -name '.' \
                      ! -name '..' \
                      ! -name '.*' \
                      -exec rm -rf {} +
                  }

                  # 修复可能的权限问题
                  sudo chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} . || echo "权限修复完成"

                  echo "文件清理完成"
                  EOF

            - name: 同步文件到服务器
              run: |
                  rsync -avz --delete --progress \
                    --exclude='node_modules/' \
                    --exclude='*.log' \
                    -e "ssh -i ~/.ssh/github_actions_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }}" \
                    $GITHUB_WORKSPACE/ \
                    ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:/www/wwwroot/egg-blog/

            - name: 启动 PM2 服务
              timeout-minutes: 5 # 设置启动步骤的超时时间
              run: |
                  ssh -i ~/.ssh/github_actions_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} <<'EOF'
                  set -e  # 遇到错误立即退出

                  cd /www/wwwroot/egg-blog

                  # 检查目录和文件
                  if [ ! -f "package.json" ]; then
                    echo "错误: package.json 不存在"
                    exit 1
                  fi

                  # 创建 PM2 配置文件（带错误处理）
                  cat > ecosystem.config.js << 'CONFIG_EOF'
                  module.exports = {
                    apps: [{
                      name: 'app',
                      script: 'npm',
                      args: 'start',
                      instances: 1,
                      autorestart: true,
                      watch: false,
                      max_memory_restart: '500M',
                      error_file: './logs/err.log',
                      out_file: './logs/out.log',
                      log_file: './logs/combined.log',
                      time: true,
                      max_restarts: 3,        # 最大重启次数
                      min_uptime: '10s',      # 最小运行时间
                      restart_delay: 4000,    # 重启延迟
                      env: {
                        NODE_ENV: 'production'
                      }
                    }]
                  };
                  CONFIG_EOF

                  # 创建日志目录
                  mkdir -p logs

                  # 检查是否已存在进程
                  if pm2 list | grep -q "app.*online"; then
                    echo "检测到在线的 PM2 进程，正在重载..."
                    if ! pm2 reload app --update-env; then
                      echo "重载失败，尝试重启..."
                      pm2 stop app || true
                      pm2 delete app || true
                      echo "正在重新启动 PM2 服务..."
                      if ! pm2 start ecosystem.config.js; then
                        echo "错误: PM2 启动失败"
                        pm2 logs app --lines 10 || true
                        exit 1
                      fi
                    fi
                  elif pm2 list | grep -q "app.*stopped\|app.*errored"; then
                    echo "检测到已停止或错误的 PM2 进程，正在重启..."
                    pm2 delete app || true
                    echo "正在启动 PM2 服务..."
                    if ! pm2 start ecosystem.config.js; then
                      echo "错误: PM2 启动失败"
                      pm2 logs app --lines 10 || true
                      exit 1
                    fi
                  else
                    echo "未检测到现有进程，正在启动新的 PM2 服务..."
                    if ! pm2 start ecosystem.config.js; then
                      echo "错误: PM2 启动失败"
                      pm2 logs app --lines 10 || true
                      exit 1
                    fi
                  fi

                  # 等待应用启动
                  echo "等待应用启动..."
                  sleep 10

                  # 健康检查
                  for i in {1..6}; do
                    echo "健康检查 $i/6..."
                    
                    # 检查PM2状态
                    if ! pm2 list | grep -q "app.*online"; then
                      echo "错误: 应用未正常运行"
                      pm2 logs app --lines 20
                      pm2 stop app || true
                      pm2 delete app || true
                      exit 1
                    fi
                    
                    # 检查端口占用（假设你的应用运行在7001端口）
                    if netstat -tlnp | grep -q ":7001.*LISTEN"; then
                      echo "✅ 应用启动成功，端口7001正在监听"
                      break
                    fi
                    
                    if [ $i -eq 6 ]; then
                      echo "❌ 健康检查失败，应用未能正常启动"
                      pm2 logs app --lines 20
                      pm2 stop app || true
                      pm2 delete app || true
                      exit 1
                    fi
                    
                    sleep 5
                  done

                  # 保存PM2配置
                  pm2 save
                  echo "✅ 部署成功"
                  EOF

            - name: 部署失败时清理
              if: failure()
              run: |
                  echo "⚠️ 部署失败，正在清理..."
                  ssh -i ~/.ssh/github_actions_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} <<'EOF' || true
                  cd /www/wwwroot/egg-blog

                  # 安全地停止所有相关进程
                  if pm2 list | grep -q "app"; then
                    echo "发现 PM2 进程，正在清理..."
                    pm2 stop app || echo "停止失败"
                    pm2 delete app || echo "删除失败"
                  else
                    echo "未发现 PM2 进程"
                  fi

                  # 清理其他可能的进程
                  pkill -f "npm start" || echo "无npm进程"
                  pkill -f "egg-scripts" || echo "无egg进程"

                  # 强制杀死可能的残留进程
                  if pgrep -f "npm start\|egg-scripts" >/dev/null 2>&1; then
                    echo "强制清理残留进程..."
                    pgrep -f "npm start\|egg-scripts" | xargs kill -9 || echo "强制清理完成"
                  fi

                  echo "清理完成"
                  EOF
